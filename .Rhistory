DataPull = DataPull[,Vars.short]
Data = dplyr::rename(DataPull,
Year = year, Subsample_count = subsample_count,
Subsample_wt_kg = subsample_wt_kg, Project = project,
CPUE_kg_per_ha = cpue_kg_per_ha_der, Subsample_count = subsample_count,
Subsample_wt_kg = subsample_wt_kg, Vessel = vessel, Tow = tow)
names(Data)[which(names(Data)=="scientific_name")] = "Scientific_name"
names(Data)[which(names(Data)=="common_name")] = "Common_name"
# Pull all tow data (includes tows where the species was not observed)
Vars <- c("project", "year", "vessel", "pass", "tow", "datetime_utc_iso", "depth_m", "longitude_dd", "latitude_dd",
"area_swept_ha_der", "trawl_id", "operation_dim$legacy_performance_code")
Vars.short <- c("project", "year", "vessel", "pass", "tow", "datetime_utc_iso", "depth_m",
"longitude_dd", "latitude_dd", "area_swept_ha_der", "trawl_id")
UrlText <- paste0("https://www.nwfsc.noaa.gov/data/api/v1/source/trawl.operation_haul_fact/selection.json?filters=project=", paste(strsplit(project, " ")[[1]], collapse = "%20"),",",
"station_invalid=0,",
"performance=Satisfactory,",
"depth_ftm>=30,depth_ftm<=700,",
"date_dim$year>=", YearRange[1], ",date_dim$year<=", YearRange[2],
"&variables=", paste0(Vars, collapse = ","))
All.Tows <- jsonlite::fromJSON(UrlText)
# Remove water hauls
fix =  is.na(All.Tows[,"operation_dim$legacy_performance_code"])
if(sum(fix) > 0) { All.Tows[fix,"operation_dim$legacy_performance_code"] = -999 }
keep = All.Tows[,"operation_dim$legacy_performance_code"] != 8
All.Tows = All.Tows[keep,]
All.Tows = All.Tows[,Vars.short]
All.Tows = dplyr::rename(All.Tows, Project = project, Trawl_id = trawl_id, Year = year,
Pass= pass, Vessel = vessel, Tow = tow, Date = datetime_utc_iso,
Depth_m = depth_m, Longitude_dd = longitude_dd, Latitude_dd = latitude_dd,
Area_Swept_ha = area_swept_ha_der)
All.Tows <- All.Tows[!duplicated(paste(All.Tows$Year, All.Tows$Pass, All.Tows$Vessel, All.Tows$Tow)),
c("Project", "Trawl_id", "Year", "Pass", "Vessel", "Tow", "Date", "Depth_m", "Longitude_dd", "Latitude_dd", "Area_Swept_ha")]
dim(All.Tows)
Out = dplyr::left_join(All.Tows, Data)
dim(Out)
library(nwfscSurvey)
library(nwfscSurvey)
SurveyName == "NWFSC.Combo"
SurveyName = "NWFSC.Combo"
Name = NULL
SciName = NULL
YearRange = c(1000, 5000)
SaveFile = FALSE
Dir = NULL
verbose = TRUE
# increase the timeout period to avoid errors when pulling data
options(timeout= 4000000)
if(SaveFile){
if(is.null(Dir)){
stop("The Dir input needs to be specified in order to save output file.")
}
}
if (is.null(Name)) { var.name = "scientific_name"; Species = SciName; new.name = "Scientific_name"; outName = Name}
if (is.null(SciName)) { var.name = "common_name"; Species = Name; new.name = "Common_name"; outName = SciName; outName = "All"}
if (is.null(SciName) & is.null(Name)) { var.name = "scientific_name"; Species = "pull all"; new.name = "Scientific_name"}#stop("Need to specifiy Name or SciName to pull data!")}
rename_columns = function(DF, origname = colnames(DF), newname) {
" # 'age_years' has both age and years, first forcing a change to 'age' "
colnames(DF)[grep("age_years", colnames(DF))] <- "age"
DF_new = DF
for (i in 1:length(newname)) {
Match = grep(newname[i], origname, ignore.case = TRUE)
if (length(Match) == 1)
colnames(DF_new)[Match] = newname[i]
}
return(DF_new)
}
surveys = createMatrix()
if (!SurveyName %in% surveys[,1]) {
stop(cat("The SurveyName does not match one of the available options:", surveys[,1])) }
for(i in 1:dim(surveys)[1]){
if(SurveyName == surveys[i,1]){
project = surveys[i,2]
projectShort = surveys[i,1]
}
}
if (length(YearRange) == 1) {
YearRange <- c(YearRange, YearRange)    }
Vars <- c("project", "trawl_id", var.name, "year", "vessel", "pass",
"tow", "datetime_utc_iso","depth_m", "weight_kg",
"length_cm", "width_cm", "sex", "age_years", "latitude_dd", "longitude_dd",
"standard_survey_dim$standard_survey_age_indicator",
"standard_survey_dim$standard_survey_length_or_width_indicator",
"standard_survey_dim$standard_survey_weight_indicator",
"operation_dim$legacy_performance_code")
Vars.short = c("project", "trawl_id", var.name, "year", "vessel", "pass",
"tow", "datetime_utc_iso","depth_m", "weight_kg",
"length_cm", "width_cm", "sex", "age_years", "latitude_dd", "longitude_dd")
UrlText  <- paste0(
"https://www.nwfsc.noaa.gov/data/api/v1/source/trawl.individual_fact/selection.json?filters=project=", paste(strsplit(project, " ")[[1]], collapse = "%20"),",",
"station_invalid=0,",
"performance=Satisfactory,",
"depth_ftm>=30,depth_ftm<=700,",
"field_identified_taxonomy_dim$", var.name, "=", paste(strsplit(Species, " ")[[1]], collapse = "%20"),
",year>=",  YearRange[1], ",year<=", YearRange[2],
"&variables=", paste0(Vars, collapse = ","))
library(nwfscSurvey)
# increase the timeout period to avoid errors when pulling data
options(timeout= 4000000)
if(SaveFile){
if(is.null(Dir)){
stop("The Dir input needs to be specified in order to save output file.")
}
}
if (is.null(Name)) { var.name = "scientific_name"; Species = SciName; new.name = "Scientific_name"; outName = Name}
if (is.null(SciName)) { var.name = "common_name"; Species = Name; new.name = "Common_name"; outName = SciName; outName = "All"}
if (is.null(SciName) & is.null(Name)) { var.name = "scientific_name"; Species = "pull all"; new.name = "Scientific_name"}#stop("Need to specifiy Name or SciName to pull data!")}
rename_columns = function(DF, origname = colnames(DF), newname) {
" # 'age_years' has both age and years, first forcing a change to 'age' "
colnames(DF)[grep("age_years", colnames(DF))] <- "age"
DF_new = DF
for (i in 1:length(newname)) {
Match = grep(newname[i], origname, ignore.case = TRUE)
if (length(Match) == 1)
colnames(DF_new)[Match] = newname[i]
}
return(DF_new)
}
surveys = createMatrix()
if (!SurveyName %in% surveys[,1]) {
stop(cat("The SurveyName does not match one of the available options:", surveys[,1])) }
for(i in 1:dim(surveys)[1]){
if(SurveyName == surveys[i,1]){
project = surveys[i,2]
projectShort = surveys[i,1]
}
}
if (length(YearRange) == 1) {
YearRange <- c(YearRange, YearRange)    }
Vars <- c("project", "trawl_id", var.name, "year", "vessel", "pass",
"tow", "datetime_utc_iso","depth_m", "weight_kg",
"length_cm", "width_cm", "sex", "age_years", "latitude_dd", "longitude_dd",
"standard_survey_dim$standard_survey_age_indicator",
"standard_survey_dim$standard_survey_length_or_width_indicator",
"standard_survey_dim$standard_survey_weight_indicator",
"operation_dim$legacy_performance_code")
Vars.short = c("project", "trawl_id", var.name, "year", "vessel", "pass",
"tow", "datetime_utc_iso","depth_m", "weight_kg",
"length_cm", "width_cm", "sex", "age_years", "latitude_dd", "longitude_dd")
UrlText  <- paste0(
"https://www.nwfsc.noaa.gov/data/api/v1/source/trawl.individual_fact/selection.json?filters=project=", paste(strsplit(project, " ")[[1]], collapse = "%20"),",",
"station_invalid=0,",
"performance=Satisfactory,",
"depth_ftm>=30,depth_ftm<=700,",
"field_identified_taxonomy_dim$", var.name, "=", paste(strsplit(Species, " ")[[1]], collapse = "%20"),
",year>=",  YearRange[1], ",year<=", YearRange[2],
"&variables=", paste0(Vars, collapse = ","))
Species
UrlText  <- paste0(
"https://www.nwfsc.noaa.gov/data/api/v1/source/trawl.individual_fact/selection.json?filters=project=", paste(strsplit(project, " ")[[1]], collapse = "%20"),",",
"station_invalid=0,",
"performance=Satisfactory,", "depth_ftm>=30,depth_ftm<=700,",
"year>=",  YearRange[1], ",year<=", YearRange[2],
"&variables=", paste0(Vars, collapse = ","))
DataPull = NULL
if (verbose){
message("Pulling biological data. This can take up to ~ 30 seconds.")}
DataPull <- try(jsonlite::fromJSON(UrlText))
Vars
paste0(Vars, collapse = ",")
catc
r = readRDS(file.choose())
names(r)
common_name = unique(r$common_name)
dplyr::group_by(r, common_name) %>%
summarize(sci_name=scientific_name)
library(dplyr)
dplyr::group_by(r, common_name) %>%
summarize(scientific_name=scientific_name)
dplyr::group_by(r, common_name) %>%
unique(common_name)
r = readRDS(file.choose())
names(r)
bio = readRDS("wcbts_bio_2019-08-01.rds")
catch = readRDS("wcbts_catch_2019-08-01.rds")
haul = readRDS("wcbts_haul_2019-08-01.rds")
table(catch$Scientific_name)
names(catch)
bio <- readRDS("~/Documents/nwfscSurvey/wcbts_bio_2019-08-01.rds")
dim(bio)
names(bio)
head(bio)
bio$length_cm
hist(bio$length_cm)
names(bio)
bio$age_years
bio$age_years
names(bio)
table(bio$common_name)
sort(table(bio$common_name))
sort(table(bio$common_name[which(bio$age_years<=5)]))
sort(table(bio$common_name[which(bio$age_years<=5)]))
which(bio$age_years<=5)
which(bio$age_years<=5)
sort(table(bio$common_name))
head(bio)
dim(bio)
summary(bio)
names(bio)
x = dplyr::filter(bio, common_names=="sablefish")
dim(x)
x = dplyr::filter(bio, common_name=="sablefish")
dim(x)
hist(x$length_cm)
x$age_years
hist(x$length_cm)
x$age_years = as.numeric(x$age_years)
hist(x$length_cm[which(x$age_years<=5)])
hist(x$length_cm[which(x$age_years<=2)])
hist(x$length_cm[which(x$age_years<=2)])
which(x$age_years<=2)
which(which(x$age_years<=2))
which(which(x$age_years<=2)
which(x$age_years<=2)
which(x$age_years<=2)
table(x$age_years)
hist(x$length_cm[which(x$age_years<=1)])
library(nwfscSurvey)
library(nwfscSurvey)
species <- "Anoplopoma fimbria"
data <- nwfscSurvey::PullCatch.fn(
SciName = species,
SurveyName = "NWFSC.Combo",
SaveFile = FALSE, Dir = NULL, verbose = FALSE)
data
head(data)
sessionInfo()
species <- "Anoplopoma fimbria"
data <- nwfscSurvey::PullCatch.fn(,
SurveyName = "NWFSC.Combo",
SaveFile = FALSE, Dir = NULL, verbose = FALSE)
library(nwfscSurvey)
haul_dat = PullHaul.fn(SurveyName = "NWFSC.Combo")
haul_dat = PullHaul.fn()
YearRange = c(1980, 5000)
SurveyName = NULL
SaveFile = FALSE
Dir = NULL
verbose = TRUE
# increase the timeout period to avoid errors when pulling data
options(timeout= 4000000)
if(SaveFile){
if(is.null(Dir)){
stop("The Dir input needs to be specified in order to save output file.")
}
if (!file.exists(Dir)) stop("The Dir argument leads to a location",
",\ni.e., ", Dir, ", that doesn't exist.")
}
surveys = createMatrix()
if(is.null(SurveyName)) {
SurveyName = surveys[,1]
}
if(length(SurveyName)==1) {
if (!SurveyName %in% surveys[,1]) {
stop(cat("The SurveyName does not match one of the available options:", surveys[,1])) }
} else {
if (length(which(SurveyName %in% surveys[,1])) != length(SurveyName)) {
stop(cat("One or more of the SurveyName fields does not match one of the available options:", surveys[,1])) }
}
project=""
for(i in 1:dim(surveys)[1]){
if(length(which(SurveyName %in% surveys[i,1]) > 0)){
project = c(project, surveys[i,2])
}
}
project = project[which(project%in%c("","NA")==FALSE)]
if (length(YearRange) == 1) {
YearRange <- c(YearRange, YearRange)    }
Vars <- c("area_swept_ha_der", "date_dim.year", "date_yyyymmdd",
"depth_hi_prec_m","door_width_m_der","fluorescence_at_surface_mg_per_m3_der",
"gear_end_latitude_dd","gear_end_longitude_dd","gear_start_latitude_dd",
"gear_start_longitude_dd","invertebrate_weight_kg","latitude_dd","leg",
"longitude_dd","net_height_m_der","net_width_m_der","nonspecific_organics_weight_kg",
"o2_at_gear_ml_per_l_der","pass","performance","project","salinity_at_gear_psu_der",
"sampling_end_hhmmss","sampling_start_hhmmss",
"target_station_design_dim.stn_invalid_for_trawl_date_whid",
"temperature_at_gear_c_der","temperature_at_surface_c_der",
"trawl_id","turbidity_ntu_der","vertebrate_weight_kg","vessel",
"vessel_end_latitude_dd","vessel_end_longitude_dd",
"vessel_start_latitude_dd","vessel_start_longitude_dd")
project_str = NA
for(i in 1:length(project)) {
project_str[i] = paste(strsplit(project, " ")[[i]], collapse = "%20")
}
# Note: this string grabs data from all projects. Projects filtered below
UrlText  <- paste0(
"https://www.webapps.nwfsc.noaa.gov/data/api/v1/source/trawl.operation_haul_fact/selection.json?filters=",
"station_invalid=0,",
"performance=Satisfactory,",
"year>=",  YearRange[1], ",year<=", YearRange[2],
"&variables=", paste0(Vars, collapse = ","))
UrlText
DataPull = NULL
verbose
if (verbose){
message("Pulling haul data. This can take up to ~ 30 seconds.")}
Data <- try(jsonlite::fromJSON(UrlText))
names(Data)
Data[which(Data$o2_at_gear_ml_per_l_der > 0)]
Data[which(Data$o2_at_gear_ml_per_l_der > 0),]
Data$date_yyyymmdd[which(Data$o2_at_gear_ml_per_l_der > 0),]
Data$date_yyyymmdd[which(Data$o2_at_gear_ml_per_l_der > 0)]
sort(Data$date_yyyymmdd[which(Data$o2_at_gear_ml_per_l_der > 0)])
rev(sort(Data$date_yyyymmdd[which(Data$o2_at_gear_ml_per_l_der > 0)]))
createMatrix()
haul_dat = PullHaul.fn()
if (verbose){
message("Pulling haul data. This can take up to ~ 30 seconds.")}
#' Pull haul data from the NWFSC data warehouse
#' The website is: https://www.webapps.nwfsc.noaa.gov/data
#' This function can be used to pull haul data and associated covariates
#'
#' @param YearRange range of years to pull data. Defaults to all years, 1977 - present.
#' @param SurveyName survey to pull the data for the options are:
#' Triennial, AFSC.Slope, NWFSC.Combo, NWFSC.Slope, NWFSC.Shelf, NWFSC.Hypoxia,
#' NWFSC.Santa.Barb.Basin, NWFSC.Shelf.Rockfish (NWFSC.Hook.Line but both are not working), NWFSC.Video#' @param SaveFile option to save the file to the directory
#' @param Dir directory where the file should be saved
#' @param verbose opt to print out message statements
#'
#' @return Returns a data frame of haul characteristics for satisfactory hauls
#' @author Eric Ward
#' @export
#'
#' @import jsonlite
#' @import chron
#'
#' @examples
#'\dontrun{
#' haul_dat = PullHaul.fn(SurveyName = "NWFSC.Combo", YearRange=c(2003,2007))
#' haul_dat = PullHaul.fn()
#'}
PullHaul.fn <- function (YearRange = c(1980, 5000), SurveyName = NULL, SaveFile = FALSE, Dir = NULL, verbose = TRUE)
{
# increase the timeout period to avoid errors when pulling data
options(timeout= 4000000)
if(SaveFile){
if(is.null(Dir)){
stop("The Dir input needs to be specified in order to save output file.")
}
if (!file.exists(Dir)) stop("The Dir argument leads to a location",
",\ni.e., ", Dir, ", that doesn't exist.")
}
surveys = createMatrix()
if(is.null(SurveyName)) {
SurveyName = surveys[,1]
}
if(length(SurveyName)==1) {
if (!SurveyName %in% surveys[,1]) {
stop(cat("The SurveyName does not match one of the available options:", surveys[,1])) }
} else {
if (length(which(SurveyName %in% surveys[,1])) != length(SurveyName)) {
stop(cat("One or more of the SurveyName fields does not match one of the available options:", surveys[,1])) }
}
project=""
for(i in 1:dim(surveys)[1]){
if(length(which(SurveyName %in% surveys[i,1]) > 0)){
project = c(project, surveys[i,2])
}
}
project = project[which(project%in%c("","NA")==FALSE)]
if (length(YearRange) == 1) {
YearRange <- c(YearRange, YearRange)    }
Vars <- c("area_swept_ha_der", "date_dim.year", "date_yyyymmdd",
"depth_hi_prec_m","door_width_m_der","fluorescence_at_surface_mg_per_m3_der",
"gear_end_latitude_dd","gear_end_longitude_dd","gear_start_latitude_dd",
"gear_start_longitude_dd","invertebrate_weight_kg","latitude_dd","leg",
"longitude_dd","net_height_m_der","net_width_m_der","nonspecific_organics_weight_kg",
"o2_at_gear_ml_per_l_der","pass","performance","project","salinity_at_gear_psu_der",
"sampling_end_hhmmss","sampling_start_hhmmss",
"target_station_design_dim.stn_invalid_for_trawl_date_whid",
"temperature_at_gear_c_der","temperature_at_surface_c_der",
"trawl_id","turbidity_ntu_der","vertebrate_weight_kg","vessel",
"vessel_end_latitude_dd","vessel_end_longitude_dd",
"vessel_start_latitude_dd","vessel_start_longitude_dd")
project_str = NA
for(i in 1:length(project)) {
project_str[i] = paste(strsplit(project, " ")[[i]], collapse = "%20")
}
# Note: this string grabs data from all projects. Projects filtered below
UrlText  <- paste0(
"https://www.webapps.nwfsc.noaa.gov/data/api/v1/source/trawl.operation_haul_fact/selection.json?filters=",
"station_invalid=0,",
"performance=Satisfactory,",
"year>=",  YearRange[1], ",year<=", YearRange[2],
"&variables=", paste0(Vars, collapse = ","))
print(UrlText)
DataPull = NULL
if (verbose){
message("Pulling haul data. This can take up to ~ 30 seconds.")}
Data <- try(jsonlite::fromJSON(UrlText))
# filter projects
Data = Data[which(Data$project %in% project == TRUE),]
if(SaveFile){
time <- Sys.time()
time <- substring(time, 1, 10)
save(Data, file = file.path(Dir, paste("Haul_", outName, "_", SurveyName, "_",  time, ".rda", sep="")))
if (verbose){
message(paste("Haul data file saved to following location:", Dir)) }
}
return(Data)
}
haul_dat = PullHaul.fn()
library(nwfscSurvey)
dat = PullCatch.fn(SurveyName = "NWFSC.Combo")
species <- "Anoplopoma fimbria"
data <- nwfscSurvey::PullCatch.fn(
SciName = species,
SurveyName = "NWFSC.Combo",
SaveFile = FALSE, Dir = NULL, verbose = FALSE)
species <- "Anoplopoma fimbria"
data <- nwfscSurvey::PullBio.fn(
SciName = species,
SurveyName = "NWFSC.Combo",
SaveFile = FALSE, Dir = NULL, verbose = FALSE)
species <- "Anoplopoma fimbria"
data <- nwfscSurvey::HaulBio.fn(
SciName = species,
SurveyName = "NWFSC.Combo",
SaveFile = FALSE, Dir = NULL, verbose = FALSE)
species <- "Anoplopoma fimbria"
data <- nwfscSurvey::PullHaul.fn(
SciName = species,
SurveyName = "NWFSC.Combo",
SaveFile = FALSE, Dir = NULL, verbose = FALSE)
species <- "Anoplopoma fimbria"
data <- nwfscSurvey::PullHaul.fn(
SurveyName = "NWFSC.Combo",
SaveFile = FALSE, Dir = NULL, verbose = FALSE)
library(nwfscSurvey)
load("~/Documents/Github projects/nwfscSurvey/data/AFSCforeign_hauls.rda")
ls()
usethis::use_data(AFSCforeign_hauls)
usethis::use_data(AFSCforeign_hauls,overwrite = TRUE)
load("~/Documents/Github projects/nwfscSurvey/data/Bio_All_NWFSC.Combo_2020-08-13.rda")
usethis::use_data(Bio_All_NWFSC.Combo_2020-08-13,overwrite = TRUE)
load("~/Documents/Github projects/nwfscSurvey/data/Bio_All_NWFSC.Combo_2020-08-13.rda")
ls()
load("~/Documents/Github projects/nwfscSurvey/data/Catch__NWFSC.Combo_2020-08-13.rda")
ls()
rm(list=ls())
load("~/Documents/Github projects/nwfscSurvey/data/Bio_All_NWFSC.Combo_2020-08-13.rda")
ls()
Data
dim(Data)
names(Data)
usethis::use_data(Data)
names(Data)
bio_nwfsc_combo = Data
usethis::use_data(bio_nwfsc_combo)
rm(list=ls())
load("~/Documents/Github projects/nwfscSurvey/data/SA3.rda")
ls()
SA3
usethis::use_data(SA3)
usethis::use_data(SA3,overwrite=TRUE)
load("~/Documents/Github projects/nwfscSurvey/data/Catch__NWFSC.Combo_2020-08-13.rda")
ls()
catch_nwfsc_combo = Out
usethis::use_data(catch_nwfsc_combo,overwrite=TRUE)
devtools::document()
library(nwfscSurvey)
devtools::document()
install.packages(stylize)
install.packages(stylizer)
install.packages("stylizer")
install.packages("stylize")
install.packages("tidyr")
library(tidyr)
stylize
stylizer
library(styler)
style_pkg()
?rlang
??rlang
Sys.getenv()
Sys.getenv()
rlang::current_env()
rlang::current_env()
?areas
?areasp
??areasp
library(rlang)
??rlang
?rlang
rlang::env()
rlang::current_env()
rlang::current_env()
library(nwfscSurvey)
library(rlang)
devtools::document()
library(nwfscSurvey)
devtools::document()
library(nwfscSurvey)
?dplyr
?ggplot2
?windows
?dev.new
?dev.new
dev.new()
plot(1:10)
dev.off()
?segments
?quantile
?grid
?hist
library(nwfscSurvey)
library(nwfscSurvey)
devtools::document()
?abline
library(nwfscSurvey)
?png
?grey
usethis::use_github_action_check_standard()
